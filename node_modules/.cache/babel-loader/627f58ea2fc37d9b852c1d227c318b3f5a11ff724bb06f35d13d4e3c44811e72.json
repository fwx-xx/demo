{"ast":null,"code":"import _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport routes from './routes';\nimport { readToken, deleteToken } from '@/utils/auth';\nimport store from '@/store';\nVue.use(VueRouter);\n\n// 对VueRouter原型上的方法进行增强\nfunction enhance(name) {\n  // 第一步：保存一下原始的方法（至于原始的方法是谁，得看name）\n  const origin = VueRouter.prototype[name];\n  // 第二步：进行修改\n  VueRouter.prototype[name] = function (location, onSuccess, onError) {\n    if (onSuccess || onError) {\n      // 第三步：调用原始的push实现跳转\n      return origin.call(this, location, onSuccess, onError);\n    } else {\n      // 第三步：调用原始的push实现跳转\n      return origin.call(this, location).catch(_ => {});\n    }\n  };\n}\nenhance('push');\nenhance('replace');\nconst router = new VueRouter({\n  mode: 'history',\n  routes,\n  // scrollBehavior什么时候执行：①整个应用一上来就执行。②每次路由跳转时都执行\n  scrollBehavior(to, from) {\n    return {\n      x: 0,\n      y: 0\n    }; //x控制横向滚动条，y控制纵向滚动条\n  }\n});\n\n// 敏感路由名单，只有登录才能看\nlet authPath = ['/trade', '/pay', '/paysuccess', '/myorder'];\nrouter.beforeEach(async (to, from, next) => {\n  // 从localStorage中读取token\n  const token = readToken();\n  // 判断token是否存在\n  if (token) {\n    // 证明有token，用户一定登录了\n    // 读取vuex中的用户信息\n    const {\n      info\n    } = store.state.user;\n    // 判断用户信息是否存在\n    if (info.id) {\n      // 用户信息存在\n      // 直接放行\n      next();\n    } else {\n      // 用户信息不存在   \n      try {\n        // 联系getUserInfo这个action去获取用户信息\n        await store.dispatch('user/getUserInfo');\n        // 直接放行\n        next();\n      } catch (error) {\n        // 删除已经靠不住（过期的）token\n        deleteToken();\n        // 放行到登录路由\n        next('/login');\n      }\n    }\n  } else {\n    // 无token，证明用户压根就没有登录\n    if (authPath.includes(to.path)) {\n      _Message.error('请您先登录！');\n      next('/login');\n    } else {\n      next();\n    }\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","routes","readToken","deleteToken","store","use","enhance","name","origin","prototype","location","onSuccess","onError","call","catch","_","router","mode","scrollBehavior","to","from","x","y","authPath","beforeEach","next","token","info","state","user","id","dispatch","error","includes","path","_Message"],"sources":["/Users/fuweixiang/Desktop/前端/git/demo/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\nimport routes from './routes'\r\nimport {readToken,deleteToken} from '@/utils/auth'\r\nimport store from '@/store'\r\nimport {Message} from 'element-ui'\r\n\r\nVue.use(VueRouter)\r\n\r\n// 对VueRouter原型上的方法进行增强\r\nfunction enhance (name){\r\n  // 第一步：保存一下原始的方法（至于原始的方法是谁，得看name）\r\n  const origin = VueRouter.prototype[name]\r\n  // 第二步：进行修改\r\n  VueRouter.prototype[name] = function(location,onSuccess,onError){\r\n    if(onSuccess || onError){\r\n      // 第三步：调用原始的push实现跳转\r\n      return origin.call(this,location,onSuccess,onError)\r\n    }else{\r\n      // 第三步：调用原始的push实现跳转\r\n      return origin.call(this,location).catch(_=>{})\r\n    }\r\n  }\r\n}\r\nenhance('push')\r\nenhance('replace')\r\n\r\n\r\nconst router = new VueRouter({\r\n  mode:'history',\r\n  routes,\r\n  // scrollBehavior什么时候执行：①整个应用一上来就执行。②每次路由跳转时都执行\r\n  scrollBehavior(to,from){\r\n    return {x:0,y:0} //x控制横向滚动条，y控制纵向滚动条\r\n  }\r\n})\r\n\r\n// 敏感路由名单，只有登录才能看\r\nlet authPath = ['/trade','/pay','/paysuccess','/myorder']\r\n\r\nrouter.beforeEach(async(to,from,next)=>{\r\n  // 从localStorage中读取token\r\n  const token = readToken()\r\n  // 判断token是否存在\r\n  if(token){\r\n    // 证明有token，用户一定登录了\r\n    // 读取vuex中的用户信息\r\n    const {info} = store.state.user\r\n    // 判断用户信息是否存在\r\n    if(info.id){\r\n      // 用户信息存在\r\n      // 直接放行\r\n      next()\r\n    }else{\r\n      // 用户信息不存在   \r\n      try {\r\n        // 联系getUserInfo这个action去获取用户信息\r\n        await store.dispatch('user/getUserInfo')\r\n        // 直接放行\r\n        next()\r\n      } catch (error) {\r\n        // 删除已经靠不住（过期的）token\r\n        deleteToken()\r\n        // 放行到登录路由\r\n        next('/login')\r\n      }\r\n    }\r\n  }else{\r\n    // 无token，证明用户压根就没有登录\r\n    if(authPath.includes(to.path)){\r\n      Message.error('请您先登录！')\r\n      next('/login')\r\n    }else{\r\n      next()\r\n    }\r\n  }\r\n})\r\n\r\nexport default router"],"mappings":";;;AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAAQC,SAAS,EAACC,WAAW,QAAO,cAAc;AAClD,OAAOC,KAAK,MAAM,SAAS;AAG3BL,GAAG,CAACM,GAAG,CAACL,SAAS,CAAC;;AAElB;AACA,SAASM,OAAOA,CAAEC,IAAI,EAAC;EACrB;EACA,MAAMC,MAAM,GAAGR,SAAS,CAACS,SAAS,CAACF,IAAI,CAAC;EACxC;EACAP,SAAS,CAACS,SAAS,CAACF,IAAI,CAAC,GAAG,UAASG,QAAQ,EAACC,SAAS,EAACC,OAAO,EAAC;IAC9D,IAAGD,SAAS,IAAIC,OAAO,EAAC;MACtB;MACA,OAAOJ,MAAM,CAACK,IAAI,CAAC,IAAI,EAACH,QAAQ,EAACC,SAAS,EAACC,OAAO,CAAC;IACrD,CAAC,MAAI;MACH;MACA,OAAOJ,MAAM,CAACK,IAAI,CAAC,IAAI,EAACH,QAAQ,CAAC,CAACI,KAAK,CAACC,CAAC,IAAE,CAAC,CAAC,CAAC;IAChD;EACF,CAAC;AACH;AACAT,OAAO,CAAC,MAAM,CAAC;AACfA,OAAO,CAAC,SAAS,CAAC;AAGlB,MAAMU,MAAM,GAAG,IAAIhB,SAAS,CAAC;EAC3BiB,IAAI,EAAC,SAAS;EACdhB,MAAM;EACN;EACAiB,cAAcA,CAACC,EAAE,EAACC,IAAI,EAAC;IACrB,OAAO;MAACC,CAAC,EAAC,CAAC;MAACC,CAAC,EAAC;IAAC,CAAC,EAAC;EACnB;AACF,CAAC,CAAC;;AAEF;AACA,IAAIC,QAAQ,GAAG,CAAC,QAAQ,EAAC,MAAM,EAAC,aAAa,EAAC,UAAU,CAAC;AAEzDP,MAAM,CAACQ,UAAU,CAAC,OAAML,EAAE,EAACC,IAAI,EAACK,IAAI,KAAG;EACrC;EACA,MAAMC,KAAK,GAAGxB,SAAS,CAAC,CAAC;EACzB;EACA,IAAGwB,KAAK,EAAC;IACP;IACA;IACA,MAAM;MAACC;IAAI,CAAC,GAAGvB,KAAK,CAACwB,KAAK,CAACC,IAAI;IAC/B;IACA,IAAGF,IAAI,CAACG,EAAE,EAAC;MACT;MACA;MACAL,IAAI,CAAC,CAAC;IACR,CAAC,MAAI;MACH;MACA,IAAI;QACF;QACA,MAAMrB,KAAK,CAAC2B,QAAQ,CAAC,kBAAkB,CAAC;QACxC;QACAN,IAAI,CAAC,CAAC;MACR,CAAC,CAAC,OAAOO,KAAK,EAAE;QACd;QACA7B,WAAW,CAAC,CAAC;QACb;QACAsB,IAAI,CAAC,QAAQ,CAAC;MAChB;IACF;EACF,CAAC,MAAI;IACH;IACA,IAAGF,QAAQ,CAACU,QAAQ,CAACd,EAAE,CAACe,IAAI,CAAC,EAAC;MAC5BC,QAAA,CAAQH,KAAK,CAAC,QAAQ,CAAC;MACvBP,IAAI,CAAC,QAAQ,CAAC;IAChB,CAAC,MAAI;MACHA,IAAI,CAAC,CAAC;IACR;EACF;AACF,CAAC,CAAC;AAEF,eAAeT,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}