{"ast":null,"code":"/* \r\n   该文件是对axios的二次封装，封装的目的是：\r\n      1.让每次请求都加上固定代理前缀/sph\r\n      2.让每次请求都加上超时时间\r\n      3.让每次请求都加上请求头school值为atguigu\r\n      4.让每次请求都加上进度条效果\r\n      5.让每次请求都将真正的数据返回给使用者（response.data）\r\n      6.让每次请求都能自动处理异常\r\n*/\nimport axios from 'axios';\nimport NProgress from 'nprogress';\nimport '@/theme/color.css';\nimport { getUserTempId, readToken } from '@/utils/auth';\nimport store from '@/store';\n\n// 创建一个axios实例对象 —— request\nconst request = axios.create({\n  baseURL: '/dev',\n  timeout: 10000\n});\n\n// 请求拦截器 —— 本质就是一函数\nrequest.interceptors.request.use(config => {\n  // 进度条走起\n  NProgress.start();\n  // 在请求头中添加userTempId —— 含义是：用户的临时身份\n  config.headers.userTempId = getUserTempId();\n  // 在请求头中添加token —— 含义是：用户的真实身份\n  config.headers.token = readToken();\n  // 返回本次请求的配置,config是本次请求所有的详细配置\n  return config;\n});\n\n// 响应拦截器 —— 本质就是一函数\nrequest.interceptors.response.use(\n// 响应成功的回调\nresponse => {\n  // 进度条停止\n  NProgress.done();\n  if (response.data.code === 208) {\n    // 代码能执行到这里，就证明，你一定发出去了一个需要身份(token)的请求，但身份过期了\n    // 强制退出登录\n    store.dispatch('user/logout', '您的身份过期，请重新登录！');\n    return new Promise(() => {});\n  } else {\n    // 返回真正的数据\n    return response.data;\n  }\n},\n// 响应失败的回调\nerror => {\n  // 进度条停止\n  NProgress.done();\n  // 第一种返回方式：将错误继续传递下去，让使用者，进一步做处理\n  // return Promise.reject(error.message)\n\n  // 第二种返回方式：直接提示将错误，终止Promise链，使用者无需配置失败的回调\n  alert(error.message);\n  return new Promise(() => {});\n});\nexport default request;","map":{"version":3,"names":["axios","NProgress","getUserTempId","readToken","store","request","create","baseURL","timeout","interceptors","use","config","start","headers","userTempId","token","response","done","data","code","dispatch","Promise","error","alert","message"],"sources":["/Users/fuweixiang/Desktop/前端/git/demo/src/utils/request.js"],"sourcesContent":["/* \r\n   该文件是对axios的二次封装，封装的目的是：\r\n      1.让每次请求都加上固定代理前缀/sph\r\n      2.让每次请求都加上超时时间\r\n      3.让每次请求都加上请求头school值为atguigu\r\n      4.让每次请求都加上进度条效果\r\n      5.让每次请求都将真正的数据返回给使用者（response.data）\r\n      6.让每次请求都能自动处理异常\r\n*/\r\nimport axios from 'axios'\r\nimport NProgress from 'nprogress'\r\nimport '@/theme/color.css'\r\nimport {getUserTempId,readToken} from '@/utils/auth'\r\nimport store from '@/store'\r\n\r\n// 创建一个axios实例对象 —— request\r\nconst request = axios.create({\r\n  baseURL:'/dev',\r\n  timeout:10000\r\n})\r\n\r\n// 请求拦截器 —— 本质就是一函数\r\nrequest.interceptors.request.use((config)=>{\r\n  // 进度条走起\r\n  NProgress.start()\r\n  // 在请求头中添加userTempId —— 含义是：用户的临时身份\r\n  config.headers.userTempId = getUserTempId()\r\n  // 在请求头中添加token —— 含义是：用户的真实身份\r\n  config.headers.token = readToken()\r\n  // 返回本次请求的配置,config是本次请求所有的详细配置\r\n  return config\r\n})\r\n\r\n// 响应拦截器 —— 本质就是一函数\r\nrequest.interceptors.response.use(\r\n  // 响应成功的回调\r\n  response => {\r\n    // 进度条停止\r\n    NProgress.done()\r\n    if(response.data.code === 208){\r\n      // 代码能执行到这里，就证明，你一定发出去了一个需要身份(token)的请求，但身份过期了\r\n      // 强制退出登录\r\n      store.dispatch('user/logout','您的身份过期，请重新登录！')\r\n      return new Promise(()=>{})\r\n    }else{\r\n      // 返回真正的数据\r\n      return response.data\r\n    }\r\n  },\r\n  // 响应失败的回调\r\n  error => {\r\n    // 进度条停止\r\n    NProgress.done()\r\n    // 第一种返回方式：将错误继续传递下去，让使用者，进一步做处理\r\n    // return Promise.reject(error.message)\r\n\r\n    // 第二种返回方式：直接提示将错误，终止Promise链，使用者无需配置失败的回调\r\n    alert(error.message)\r\n    return new Promise(()=>{})\r\n  }\r\n)\r\n\r\nexport default request"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAO,mBAAmB;AAC1B,SAAQC,aAAa,EAACC,SAAS,QAAO,cAAc;AACpD,OAAOC,KAAK,MAAM,SAAS;;AAE3B;AACA,MAAMC,OAAO,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BC,OAAO,EAAC,MAAM;EACdC,OAAO,EAAC;AACV,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAAEC,MAAM,IAAG;EACzC;EACAV,SAAS,CAACW,KAAK,CAAC,CAAC;EACjB;EACAD,MAAM,CAACE,OAAO,CAACC,UAAU,GAAGZ,aAAa,CAAC,CAAC;EAC3C;EACAS,MAAM,CAACE,OAAO,CAACE,KAAK,GAAGZ,SAAS,CAAC,CAAC;EAClC;EACA,OAAOQ,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,OAAO,CAACI,YAAY,CAACO,QAAQ,CAACN,GAAG;AAC/B;AACAM,QAAQ,IAAI;EACV;EACAf,SAAS,CAACgB,IAAI,CAAC,CAAC;EAChB,IAAGD,QAAQ,CAACE,IAAI,CAACC,IAAI,KAAK,GAAG,EAAC;IAC5B;IACA;IACAf,KAAK,CAACgB,QAAQ,CAAC,aAAa,EAAC,eAAe,CAAC;IAC7C,OAAO,IAAIC,OAAO,CAAC,MAAI,CAAC,CAAC,CAAC;EAC5B,CAAC,MAAI;IACH;IACA,OAAOL,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AACD;AACAI,KAAK,IAAI;EACP;EACArB,SAAS,CAACgB,IAAI,CAAC,CAAC;EAChB;EACA;;EAEA;EACAM,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;EACpB,OAAO,IAAIH,OAAO,CAAC,MAAI,CAAC,CAAC,CAAC;AAC5B,CACF,CAAC;AAED,eAAehB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}