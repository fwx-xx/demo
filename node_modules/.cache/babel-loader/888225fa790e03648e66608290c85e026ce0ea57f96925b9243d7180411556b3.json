{"ast":null,"code":"// 此文件专门用于管理整个项目的表单校验\nimport Vue from 'vue';\n\n// 引入ValidationProvider组件，用于包裹需要验证的输入元素\n// 引入extend函数，用于定制规则\n// 引入ValidationObserver组件，用于统一校验\nimport { ValidationProvider, extend, ValidationObserver } from 'vee-validate';\n// 引入一个内置的规则\nimport { required } from 'vee-validate/dist/rules';\n\n// 将ValidationProvider注册为全局组件\n// 将ValidationObserver注册为全局组件\nVue.component('ValidationProvider', ValidationProvider);\nVue.component('ValidationObserver', ValidationObserver);\n\n// 定制一个验证手机的规则\nconst phoneReg = /^(0|86|17951)?(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]{8}$/;\nextend('shouji', {\n  //只要你输入了东西，validate方法就会调用，且会收到你输入的内容\n  validate: value => phoneReg.test(value),\n  //具体的验证逻辑\n  message: '手机号格式不合法' //验证不通过提示的内容\n});\n\n// 定制一个必填项规则\nextend('bixu', {\n  ...required,\n  message: '{_field_}必须输入'\n});\n\n// 定制一个验证码规则\nconst codeReg = /^\\d{6}$/;\nextend('ma', {\n  validate: value => codeReg.test(value),\n  message: '验证码必须为6为纯数字'\n});\n\n// 定制一个密码规则\nconst pwdReg = /^\\w{6,21}$/;\nextend('mima', {\n  validate: value => pwdReg.test(value),\n  message: '密码必须为6~21位的数字、字母、下划线'\n});\n\n// 定制一个确认密码规则\nextend('remima', {\n  validate(value, params) {\n    return value === params[0];\n  },\n  message: '确认密码必须和密码一致'\n});\n\n// 定制一个协议规则\nextend('agree', {\n  validate: value => value,\n  message: '协议必须同意'\n});","map":{"version":3,"names":["Vue","ValidationProvider","extend","ValidationObserver","required","component","phoneReg","validate","value","test","message","codeReg","pwdReg","params"],"sources":["/Users/fuweixiang/Desktop/前端/git/demo/src/utils/validate.js"],"sourcesContent":["// 此文件专门用于管理整个项目的表单校验\r\nimport Vue from 'vue'\r\n\r\n// 引入ValidationProvider组件，用于包裹需要验证的输入元素\r\n// 引入extend函数，用于定制规则\r\n// 引入ValidationObserver组件，用于统一校验\r\nimport {ValidationProvider,extend,ValidationObserver} from 'vee-validate'\r\n// 引入一个内置的规则\r\nimport {required} from 'vee-validate/dist/rules'\r\n\r\n// 将ValidationProvider注册为全局组件\r\n// 将ValidationObserver注册为全局组件\r\nVue.component('ValidationProvider',ValidationProvider)\r\nVue.component('ValidationObserver',ValidationObserver)\r\n\r\n// 定制一个验证手机的规则\r\nconst phoneReg = /^(0|86|17951)?(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]{8}$/\r\nextend('shouji',{\r\n  //只要你输入了东西，validate方法就会调用，且会收到你输入的内容\r\n  validate:value => phoneReg.test(value) , //具体的验证逻辑\r\n  message:'手机号格式不合法' //验证不通过提示的内容\r\n})\r\n\r\n// 定制一个必填项规则\r\nextend('bixu',{\r\n  ...required,\r\n  message:'{_field_}必须输入'\r\n})\r\n\r\n// 定制一个验证码规则\r\nconst codeReg = /^\\d{6}$/\r\nextend('ma',{\r\n  validate :value => codeReg.test(value),\r\n  message:'验证码必须为6为纯数字'\r\n})\r\n\r\n// 定制一个密码规则\r\nconst pwdReg = /^\\w{6,21}$/\r\nextend('mima',{\r\n  validate :value => pwdReg.test(value),\r\n  message:'密码必须为6~21位的数字、字母、下划线'\r\n})\r\n\r\n// 定制一个确认密码规则\r\nextend('remima',{\r\n  validate(value,params){\r\n    return value === params[0]\r\n  },\r\n  message:'确认密码必须和密码一致'\r\n})\r\n\r\n// 定制一个协议规则\r\nextend('agree',{\r\n  validate: value => value,\r\n  message:'协议必须同意'\r\n})\r\n\r\n\r\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,KAAK;;AAErB;AACA;AACA;AACA,SAAQC,kBAAkB,EAACC,MAAM,EAACC,kBAAkB,QAAO,cAAc;AACzE;AACA,SAAQC,QAAQ,QAAO,yBAAyB;;AAEhD;AACA;AACAJ,GAAG,CAACK,SAAS,CAAC,oBAAoB,EAACJ,kBAAkB,CAAC;AACtDD,GAAG,CAACK,SAAS,CAAC,oBAAoB,EAACF,kBAAkB,CAAC;;AAEtD;AACA,MAAMG,QAAQ,GAAG,4EAA4E;AAC7FJ,MAAM,CAAC,QAAQ,EAAC;EACd;EACAK,QAAQ,EAACC,KAAK,IAAIF,QAAQ,CAACG,IAAI,CAACD,KAAK,CAAC;EAAG;EACzCE,OAAO,EAAC,UAAU,CAAC;AACrB,CAAC,CAAC;;AAEF;AACAR,MAAM,CAAC,MAAM,EAAC;EACZ,GAAGE,QAAQ;EACXM,OAAO,EAAC;AACV,CAAC,CAAC;;AAEF;AACA,MAAMC,OAAO,GAAG,SAAS;AACzBT,MAAM,CAAC,IAAI,EAAC;EACVK,QAAQ,EAAEC,KAAK,IAAIG,OAAO,CAACF,IAAI,CAACD,KAAK,CAAC;EACtCE,OAAO,EAAC;AACV,CAAC,CAAC;;AAEF;AACA,MAAME,MAAM,GAAG,YAAY;AAC3BV,MAAM,CAAC,MAAM,EAAC;EACZK,QAAQ,EAAEC,KAAK,IAAII,MAAM,CAACH,IAAI,CAACD,KAAK,CAAC;EACrCE,OAAO,EAAC;AACV,CAAC,CAAC;;AAEF;AACAR,MAAM,CAAC,QAAQ,EAAC;EACdK,QAAQA,CAACC,KAAK,EAACK,MAAM,EAAC;IACpB,OAAOL,KAAK,KAAKK,MAAM,CAAC,CAAC,CAAC;EAC5B,CAAC;EACDH,OAAO,EAAC;AACV,CAAC,CAAC;;AAEF;AACAR,MAAM,CAAC,OAAO,EAAC;EACbK,QAAQ,EAAEC,KAAK,IAAIA,KAAK;EACxBE,OAAO,EAAC;AACV,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}